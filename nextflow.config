/*
 * -------------------------------------------------
 *  nf-core/plant-rnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  container = 'lifebitai/plant-rnaseq:latest' // Container slug. Stable releases should specify release tag!

  help = false
  reads = false
  readPaths = false
  params.conditions = false
  params.reads_extension = "fastq"
  params.fasta = false
  outdir = './results'
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
}

// from base config
process {

  container = params.container

  cpus = { check_max( 30 * task.attempt, 'cpus' ) }
  memory = { check_max( 240.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: fastqc {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  withName: multiqc {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 256.GB
  max_cpus = 64
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}


// from docker config
docker.enabled = true
process.container = params.container

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/plant-rnaseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/plant-rnaseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/plant-rnaseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/plant-rnaseq_dag.svg"
}

manifest {
  name = 'nf-core/plant-rnaseq'
  author = 'Project author name (use a comma to separate multiple names).'
  homePage = 'https://github.com/nf-core/plant-rnaseq'
  description = 'Nextflow pipeline to analyse gene expression in plants'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
